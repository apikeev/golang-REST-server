// Package Task provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package task

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Task defines model for Task.
type Task struct {
	Due  *time.Time `json:"due,omitempty"`
	Id   *int       `json:"id,omitempty"`
	Tags *[]string  `json:"tags,omitempty"`
	Text *string    `json:"text,omitempty"`
}

// PostTaskJSONBody defines parameters for PostTask.
type PostTaskJSONBody struct {
	Due  *time.Time `json:"due,omitempty"`
	Tags *[]string  `json:"tags,omitempty"`
	Text *string    `json:"text,omitempty"`
}

// PostTaskJSONRequestBody defines body for PostTask for application/json ContentType.
type PostTaskJSONRequestBody PostTaskJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDueYearMonthDay request
	GetDueYearMonthDay(ctx context.Context, year int, month int, day int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagTagname request
	GetTagTagname(ctx context.Context, tagname string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTask request
	GetTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTask request with any body
	PostTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTask(ctx context.Context, body PostTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaskId request
	DeleteTaskId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskId request
	GetTaskId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDueYearMonthDay(ctx context.Context, year int, month int, day int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDueYearMonthDayRequest(c.Server, year, month, day)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagTagname(ctx context.Context, tagname string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagTagnameRequest(c.Server, tagname)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTask(ctx context.Context, body PostTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaskId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaskIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDueYearMonthDayRequest generates requests for GetDueYearMonthDay
func NewGetDueYearMonthDayRequest(server string, year int, month int, day int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "year", runtime.ParamLocationPath, year)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "month", runtime.ParamLocationPath, month)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "day", runtime.ParamLocationPath, day)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/due/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagTagnameRequest generates requests for GetTagTagname
func NewGetTagTagnameRequest(server string, tagname string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagname", runtime.ParamLocationPath, tagname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskRequest generates requests for GetTask
func NewGetTaskRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTaskRequest calls the generic PostTask builder with application/json body
func NewPostTaskRequest(server string, body PostTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTaskRequestWithBody generates requests for PostTask with any type of body
func NewPostTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaskIdRequest generates requests for DeleteTaskId
func NewDeleteTaskIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskIdRequest generates requests for GetTaskId
func NewGetTaskIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDueYearMonthDay request
	GetDueYearMonthDayWithResponse(ctx context.Context, year int, month int, day int, reqEditors ...RequestEditorFn) (*GetDueYearMonthDayResponse, error)

	// GetTagTagname request
	GetTagTagnameWithResponse(ctx context.Context, tagname string, reqEditors ...RequestEditorFn) (*GetTagTagnameResponse, error)

	// GetTask request
	GetTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaskResponse, error)

	// PostTask request with any body
	PostTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaskResponse, error)

	PostTaskWithResponse(ctx context.Context, body PostTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaskResponse, error)

	// DeleteTaskId request
	DeleteTaskIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTaskIdResponse, error)

	// GetTaskId request
	GetTaskIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTaskIdResponse, error)
}

type GetDueYearMonthDayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
}

// Status returns HTTPResponse.Status
func (r GetDueYearMonthDayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDueYearMonthDayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagTagnameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
}

// Status returns HTTPResponse.Status
func (r GetTagTagnameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagTagnameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
}

// Status returns HTTPResponse.Status
func (r GetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
}

// Status returns HTTPResponse.Status
func (r PostTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r GetTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDueYearMonthDayWithResponse request returning *GetDueYearMonthDayResponse
func (c *ClientWithResponses) GetDueYearMonthDayWithResponse(ctx context.Context, year int, month int, day int, reqEditors ...RequestEditorFn) (*GetDueYearMonthDayResponse, error) {
	rsp, err := c.GetDueYearMonthDay(ctx, year, month, day, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDueYearMonthDayResponse(rsp)
}

// GetTagTagnameWithResponse request returning *GetTagTagnameResponse
func (c *ClientWithResponses) GetTagTagnameWithResponse(ctx context.Context, tagname string, reqEditors ...RequestEditorFn) (*GetTagTagnameResponse, error) {
	rsp, err := c.GetTagTagname(ctx, tagname, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagTagnameResponse(rsp)
}

// GetTaskWithResponse request returning *GetTaskResponse
func (c *ClientWithResponses) GetTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaskResponse, error) {
	rsp, err := c.GetTask(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskResponse(rsp)
}

// PostTaskWithBodyWithResponse request with arbitrary body returning *PostTaskResponse
func (c *ClientWithResponses) PostTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaskResponse, error) {
	rsp, err := c.PostTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaskResponse(rsp)
}

func (c *ClientWithResponses) PostTaskWithResponse(ctx context.Context, body PostTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaskResponse, error) {
	rsp, err := c.PostTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaskResponse(rsp)
}

// DeleteTaskIdWithResponse request returning *DeleteTaskIdResponse
func (c *ClientWithResponses) DeleteTaskIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteTaskIdResponse, error) {
	rsp, err := c.DeleteTaskId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaskIdResponse(rsp)
}

// GetTaskIdWithResponse request returning *GetTaskIdResponse
func (c *ClientWithResponses) GetTaskIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetTaskIdResponse, error) {
	rsp, err := c.GetTaskId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskIdResponse(rsp)
}

// ParseGetDueYearMonthDayResponse parses an HTTP response from a GetDueYearMonthDayWithResponse call
func ParseGetDueYearMonthDayResponse(rsp *http.Response) (*GetDueYearMonthDayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDueYearMonthDayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagTagnameResponse parses an HTTP response from a GetTagTagnameWithResponse call
func ParseGetTagTagnameResponse(rsp *http.Response) (*GetTagTagnameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTagTagnameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaskResponse parses an HTTP response from a GetTaskWithResponse call
func ParseGetTaskResponse(rsp *http.Response) (*GetTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTaskResponse parses an HTTP response from a PostTaskWithResponse call
func ParsePostTaskResponse(rsp *http.Response) (*PostTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTaskIdResponse parses an HTTP response from a DeleteTaskIdWithResponse call
func ParseDeleteTaskIdResponse(rsp *http.Response) (*DeleteTaskIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaskIdResponse parses an HTTP response from a GetTaskIdWithResponse call
func ParseGetTaskIdResponse(rsp *http.Response) (*GetTaskIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get tasks with given due date
	// (GET /due/{year}/{month}/{day})
	GetDueYearMonthDay(ctx echo.Context, year int, month int, day int) error
	// Get tasks with given tag name
	// (GET /tag/{tagname})
	GetTagTagname(ctx echo.Context, tagname string) error
	// Returns a list of all tasks
	// (GET /task)
	GetTask(ctx echo.Context) error
	// Create a task
	// (POST /task)
	PostTask(ctx echo.Context) error
	// Delete task with specific id
	// (DELETE /task/{id})
	DeleteTaskId(ctx echo.Context, id int) error
	// Get task with specific id
	// (GET /task/{id})
	GetTaskId(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDueYearMonthDay converts echo context to params.
func (w *ServerInterfaceWrapper) GetDueYearMonthDay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year int

	err = runtime.BindStyledParameterWithLocation("simple", false, "year", runtime.ParamLocationPath, ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month int

	err = runtime.BindStyledParameterWithLocation("simple", false, "month", runtime.ParamLocationPath, ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	// ------------- Path parameter "day" -------------
	var day int

	err = runtime.BindStyledParameterWithLocation("simple", false, "day", runtime.ParamLocationPath, ctx.Param("day"), &day)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter day: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDueYearMonthDay(ctx, year, month, day)
	return err
}

// GetTagTagname converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagTagname(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagname" -------------
	var tagname string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagname", runtime.ParamLocationPath, ctx.Param("tagname"), &tagname)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagname: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTagTagname(ctx, tagname)
	return err
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTask(ctx)
	return err
}

// PostTask converts echo context to params.
func (w *ServerInterfaceWrapper) PostTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTask(ctx)
	return err
}

// DeleteTaskId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTaskId(ctx, id)
	return err
}

// GetTaskId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTaskId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTaskId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/due/:year/:month/:day", wrapper.GetDueYearMonthDay)
	router.GET(baseURL+"/tag/:tagname", wrapper.GetTagTagname)
	router.GET(baseURL+"/task", wrapper.GetTask)
	router.POST(baseURL+"/task", wrapper.PostTask)
	router.DELETE(baseURL+"/task/:id", wrapper.DeleteTaskId)
	router.GET(baseURL+"/task/:id", wrapper.GetTaskId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWQW/bOgz+KwLfO/rFSXvz7W0ZhgzYOrS5DEMPrMU4am1LleiugeH/PlD2mrZx2qzF",
	"gG0nJyStj/w+knILua2cranmAFkLIV9ThfHnEsOVPJ23jjwbilbdkDxW1lfIkIFGpv/YVAQJ8MYRZBDY",
	"m7qALgGjJXYwm5qpIC92xiIeZpiqcC9k++ZgQO9xE//TLY8EbiPtxSXlDJ2YTL2yMVcKuTeOja0hg+XJ",
	"/ESSNFzKC2dYuZLU6buzpQrkb8hDAjfkQx89m0wnU0G2jmp0BjI4nkwnM0jAIa9j1qluKG03hL5L28rW",
	"vO7SVuOmE2dBMWHhDiWDhYYM3hPPG/pC6D9K+Bw38TyPFTH5ANnXnazXpAQBpCzIIjgkUGMlRQweT9eN",
	"8aQhY99QMqgo8JWpTdVUkM2SHR26ZAws1jGO9sP1BBzeDnBHyQuwdeRjBLl3HIB7PHsG91yOCc7Woe/n",
	"o+lUHrmtmeqoGDpXmjxqll4Gya29h3TXsv96WkEG/6TbAUqH6Unj6Ox0sbTmw5r/Vx/OTj6p6Fd2pRjD",
	"lVrMQ2zs0FQV+k3fNdEV1DfDa1WYG6qVboQvphibMhZpy1gIX0+23xKLZR92SOcxFmqIHVGF7w7ar8zj",
	"gf1r+L+jZuC/X5b7aQ9X8AeWfkrc+DooVKUJLIFYlj0ZguJsGKn3sw3bgq8bCvzG6s1P1fqKS+cXXy6P",
	"hkRoY6suSKHWpOU3r0kFtp7k7FcpvrO9dvAXc9Ek94Qs4FH8BwK+jS6FW1/s1bQ1uuvvyJKYdjWcR7uU",
	"t9CHbIomkFeL+fiiMPrll9SehTEiw73hNFr1helHdPRl9d0e44Oj3KxMrowWuZ6a39+TiIOb6fmtsae9",
	"H/C6ZzWOkBkD44dVT1XjS8hgzexClqZ0G7+/JrmtoDvvvgcAAP//fKxrSYgKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
